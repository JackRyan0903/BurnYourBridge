

/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/
// @author    정성화
// @e-mail    JackRyan0903@gmail.com
// @Copyright 2015년 2월 8일 일요일  PM 10:35:01. Jack Ryan all rights reserved.
/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/


#pragma once

/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/
/*  @링크
/*  @설명
/*      1. #pragma comment(lib, "pdh.lib")
/*          : Pdh.h
/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/

/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/
/*  @포함
/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/
#include "stdafx.h"


//================================================================================//
//  @클래스
//	@설명
//		frame 간의 시간을 정확하게 구해주는 클래스
//  @포함 함수
//      1. initialize() : 클래스 초기화 (멤버 변수 초기화 및 고해상도 타이머를 지원하는지 여부를 알아봄)
//      2. update() : 클래스 업데이트,)
//      3. deinitialize() : 클래스 종료
//================================================================================//
class CTimer :
	public DesignPattern::CSingleton<CTimer>
{
public:
	void initialize(void);
	void update(void);
	void deinitialize(void);


public:
	CTimer()
	{

		m_fTicksPerMs = 0;
		m_fFrameTime = 0;
		m_i64Frequency = 0;
		m_i64StartTime = 0;

	}


	~CTimer()
	{

		m_fTicksPerMs = 0;
		m_fFrameTime = 0;
		m_i64Frequency = 0;
		m_i64StartTime = 0;

	}

	float getFrameTime() const
	{

		return m_fFrameTime;

	}

private:
	//================================================================================//
	//  @복사 생성자
	//  @설명
	//		객체 복사 방지 private
	//		객체 복사 시 묵시적 형변환을 막기위해 explicit 키워드 사용
	//================================================================================//
	explicit CTimer(const CTimer& copy){}

	//================================================================================//
	//  @연산자 오버로딩=
	//  @설명
	//		객체 복사 방지 private
	//================================================================================//
	CTimer& operator=(const CTimer& copy){}


private:	
	float m_fTicksPerMs;
	float m_fFrameTime;
	INT64 m_i64Frequency;
	INT64 m_i64StartTime;

};

