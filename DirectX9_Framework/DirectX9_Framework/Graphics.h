

/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/
// @author    정성화
// @e-mail    JackRyan0903@gmail.com
// @Copyright 2015년 1월 26일 월요일  오후 5:45:34. Jack Ryan all rights reserved.
/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/


#pragma once
#include "DesignPattern.h"
#include "D3D_Main.h"
#include "D3D_Font.h"


//================================================================================//
//  @클래스
//	@설명
//		그래픽 관련 클래스 초기화 작업 및 작동 관리 클래스
//  @포함 함수
//      1. initialize() : 클래스 초기화
//      2. update() : 클래스 업데이트
//      3. deinitialize() : 클래스 종료
//================================================================================//
class CGraphics :
	public DesignPattern::CSingleton<CGraphics>
{
public:
	//================================================================================//
	//  @멤버 함수
	//  @설명 : 클래스를 초기화 하는 함수
	//	@매개변수	
	//		1. HWND : 메인 윈도우의 핸들 값.
	//		2. shrdWININFO : 윈도우 정보를 가지고 있는 구조체.
	//================================================================================//
	void initialize(HWND &hWnd, const shrdWININFO &winInfo);


	//================================================================================//
	//  @멤버 함수
	//  @설명 : 클래스 업데이트 함수	
	//================================================================================//
	void update(const int &iFPS, const int &iCPU, const float &fFrameTime);


	//================================================================================//
	//  @멤버 함수
	//  @설명 : 클래스 종료 함수	
	//================================================================================//
	void deinitialize(void);


public:
	CGraphics()
	{

		m_cpD3DMain = nullptr;

	}


	~CGraphics()
	{

		m_cpD3DMain = nullptr;

	}


private:
	void render(const int &iFPS, const int &iCPU, const float &fFrameTime) const;


	//================================================================================//
	//  @복사 생성자
	//  @설명
	//		객체 복사 방지 private
	//		객체 복사 시 묵시적 형변환을 막기위해 explicit 키워드 사용
	//================================================================================//
	explicit CGraphics(const CGraphics& copy){}

	//================================================================================//
	//  @연산자 오버로딩=
	//  @설명
	//		객체 복사 방지 private
	//================================================================================//
	CGraphics& operator=(const CGraphics& copy){}

private:
	CD3D_Main *m_cpD3DMain;
	CD3D_Font *m_cpD3DFont;

};

