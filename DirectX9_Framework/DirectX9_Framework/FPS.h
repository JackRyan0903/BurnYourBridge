

/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/
// @author    정성화
// @e-mail    JackRyan0903@gmail.com
// @Copyright 2015년 2월 7일 토요일  오후 7:07:57. Jack Ryan all rights reserved.
/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/


#pragma once

/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/
/*  @링크
/*  @설명
/*      1. #pragma comment(lib, "winmm.lib")
/*          : mmsystem.h
/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/
#pragma comment(lib, "winmm.lib")


/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/
/*  @포함
/*=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=+=*/
#include <Windows.h>
#include <mmsystem.h>
#include "DesignPattern.h"


//================================================================================//
//  @클래스
//	@설명
//		FPS 값을 계산 하고 그에 따른 FPS 값을 get할 수 있게 하는 클래스
//  @포함 함수
//      1. initialize() : 클래스 초기화 (멤버 변수 초기화)
//      2. update() : 클래스 업데이트 (FPS 계산)
//      3. deinitialize() : 클래스 종료
//================================================================================//
class CFPS :
	public DesignPattern::CSingleton < CFPS >
{
public:
	void initialize(void);
	void update(void);
	void deinitialize(void);

public:
	CFPS()
	{
		m_iFPS = 0;
		m_iCount = 0;
		m_lStartTime = 0;
	}
	~CFPS()
	{
		m_iFPS = 0;
		m_iCount = 0;
		m_lStartTime = 0;
	}

	int getFPS(void)const
	{

		return m_iFPS;

	}

private:
	//================================================================================//
	//  @복사 생성자
	//  @설명
	//		객체 복사 방지 private
	//		객체 복사 시 묵시적 형변환을 막기위해 explicit 키워드 사용
	//================================================================================//
	explicit CFPS(const CFPS& copy){}

	//================================================================================//
	//  @연산자 오버로딩=
	//  @설명
	//		객체 복사 방지 private
	//================================================================================//
	CFPS& operator=(const CFPS& copy){}

private:
	int m_iFPS;
	int m_iCount;
	unsigned long m_lStartTime;

};

